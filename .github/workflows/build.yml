name: Build Python/Pygame Android App (Docker)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest # System operacyjny hosta dla runnera

    # Używamy kontenera Docker z preinstalowanym środowiskiem
    container:
      # Obraz kivy/buildozer zawiera Javę, Android SDK/NDK, zależności systemowe i buildozera
      # Użycie ":latest" da najnowszą wersję, ale może być mniej stabilne.
      # Możesz spróbować znaleźć bardziej konkretny tag, jeśli ":latest" zawiedzie.
      image: kivy/buildozer:latest

    steps:
      # Krok 1: Pobranie kodu repozytorium DO kontenera
      # Kod źródłowy aplikacji musi być dostępny wewnątrz kontenera.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Krok 2: (Opcjonalnie) Instalacja zależności Pythona z requirements.txt
      # Buildozer jest już w obrazie, ale mogą być potrzebne biblioteki Twojego projektu.
      - name: Install project Python dependencies (if needed)
        run: |
          echo "Attempting to install requirements from requirements.txt if it exists..."
          # Sprawdźmy wersję pip i python dla informacji
          python --version
          pip --version
          pip install --upgrade pip
          if [ -f requirements.txt ]; then
             echo "requirements.txt found, installing..."
             pip install -r requirements.txt
          else
             echo "requirements.txt not found, skipping pip install."
          fi
          echo "Project Python dependencies installation step finished."

      # Krok 3: Czyszczenie lokalnego stanu Buildozera (dobra praktyka, na wszelki wypadek)
      - name: Clean local Buildozer state (if exists)
        run: |
           echo "Checking for local .buildozer directory..."
           if [ -d ".buildozer" ]; then
             echo "Removing existing .buildozer directory..."
             rm -rf .buildozer
           else
             echo "Local .buildozer directory not found (OK)."
           fi

      # Krok 4: Budowanie APK za pomocą Buildozera w kontenerze
      # Zmienne środowiskowe jak ANDROID_HOME powinny być już ustawione w obrazie Docker.
      # Buildozer odczyta konfigurację (wersje, zależności) z pliku buildozer.spec.
      - name: Build debug APK with Buildozer
        run: |
          echo "Starting Buildozer build process inside the container..."
          # Możesz dodać 'env' aby zobaczyć zmienne środowiskowe w kontenerze
          # env
          echo "Running buildozer command..."
          # Używamy -vv dla bardzo szczegółowych logów na wypadek problemów
          buildozer -vv android debug

      # Krok 5: Przesłanie artefaktu APK
      # Pliki wygenerowane w kontenerze (w tym bin/*.apk) są dostępne dla tego kroku.
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug-docker # Inna nazwa artefaktu dla odróżnienia
          path: bin/*.apk # Domyślna ścieżka wyjściowa Buildozera
          if-no-files-found: error # Zgłoś błąd, jeśli plik APK nie został znaleziony
