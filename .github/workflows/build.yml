name: Build Python/Pygame Android App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # Krok 1: Pobranie kodu repozytorium (używa akcji)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Krok 2: Konfiguracja środowiska Python (używa akcji)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Dostosuj wersję Pythona

      # Krok 3: Konfiguracja Javy (JDK) (używa akcji)
      - name: Set up Java Development Kit (JDK)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11' # JDK 11 lub 17 są często zalecane dla buildozera

      # Krok 4: Instalacja systemowych zależności Buildozera (wykonuje polecenia)
      - name: Install dependencies for Buildozer
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            git \
            zip \
            unzip \
            build-essential \
            python3-dev \
            libsdl2-dev \
            libsdl2-image-dev \
            libsdl2-mixer-dev \
            libsdl2-ttf-dev \
            libffi-dev \
            libssl-dev \
            liblzma-dev \
            libbz2-dev \
            libncursesw5-dev \
            libgdbm-compat-dev \
            libsqlite3-dev \
            libreadline-dev \
            uuid-dev \
            autoconf \
            libtool \
            pkg-config \
            ccache

      # Krok 5: Instalacja Buildozera i zależności Python (wykonuje polecenia)
      - name: Install Python dependencies (including Buildozer)
        run: |
          python -m pip install --upgrade pip
          pip install buildozer cython # Cython jest często potrzebny
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          echo "Python dependencies installed." # Dodatkowe echo dla pewności wykonania kroku

      # Krok 6: Opcjonalna inicjalizacja Buildozera (wykonuje polecenia - nawet jeśli to tylko komentarz/echo)
      # Ten krok jest zazwyczaj pomijany, jeśli plik buildozer.spec już istnieje w repozytorium.
      - name: Initialize Buildozer (if needed)
        run: |
          echo "Checking for buildozer.spec..."
          if [ ! -f buildozer.spec ]; then
            echo "buildozer.spec not found, running buildozer init..."
            # buildozer init # Odkomentuj tę linię BARDZO OSTROŻNIE, tylko jeśli absolutnie musisz wygenerować plik .spec w locie.
            # Zazwyczaj plik .spec powinien być częścią Twojego repozytorium.
            echo "Warning: buildozer init was run (or would be run if uncommented). It's better to have buildozer.spec in your repo."
          else
            echo "buildozer.spec found, skipping init."
          fi

      # Krok 7: Budowanie APK (wersja debug) (wykonuje polecenia)
      - name: Build debug APK with Buildozer
        run: |
          echo "Starting Buildozer build process..."
          buildozer -v android debug # -v dla szczegółowych logów

      # Krok 8: Przesłanie zbudowanego pliku APK jako artefaktu (używa akcji)
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-debug
          path: bin/*.apk # Domyślna lokalizacja wyjściowa Buildozera
          if-no-files-found: error # Zgłoś błąd, jeśli APK nie zostanie znaleziony